module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = function() {return ( JSON.stringify(variables))},
        peg$c2 = "Digit",
        peg$c3 = { type: "literal", value: "Digit", description: "\"Digit\"" },
        peg$c4 = function() {return "\d"},
        peg$c5 = "Not Digit",
        peg$c6 = { type: "literal", value: "Not Digit", description: "\"Not Digit\"" },
        peg$c7 = function() {return "\D"},
        peg$c8 = "Word",
        peg$c9 = { type: "literal", value: "Word", description: "\"Word\"" },
        peg$c10 = function() {return "\w"},
        peg$c11 = "Not Word",
        peg$c12 = { type: "literal", value: "Not Word", description: "\"Not Word\"" },
        peg$c13 = function() {return "\W"},
        peg$c14 = "Space",
        peg$c15 = { type: "literal", value: "Space", description: "\"Space\"" },
        peg$c16 = function() {return "\s"},
        peg$c17 = "Not Space",
        peg$c18 = { type: "literal", value: "Not Space", description: "\"Not Space\"" },
        peg$c19 = function() {return "\S"},
        peg$c20 = "Tab",
        peg$c21 = { type: "literal", value: "Tab", description: "\"Tab\"" },
        peg$c22 = function() {return "\t"},
        peg$c23 = "Return",
        peg$c24 = { type: "literal", value: "Return", description: "\"Return\"" },
        peg$c25 = function() {return "\r"},
        peg$c26 = "Linefeed",
        peg$c27 = { type: "literal", value: "Linefeed", description: "\"Linefeed\"" },
        peg$c28 = function() {return "\n"},
        peg$c29 = "Vertical Tab",
        peg$c30 = { type: "literal", value: "Vertical Tab", description: "\"Vertical Tab\"" },
        peg$c31 = function() {return "\v"},
        peg$c32 = "Form Feed",
        peg$c33 = { type: "literal", value: "Form Feed", description: "\"Form Feed\"" },
        peg$c34 = function() {return "\f"},
        peg$c35 = "Backspace",
        peg$c36 = { type: "literal", value: "Backspace", description: "\"Backspace\"" },
        peg$c37 = function() {return "\b"},
        peg$c38 = "Null",
        peg$c39 = { type: "literal", value: "Null", description: "\"Null\"" },
        peg$c40 = function() {return "\0"},
        peg$c41 = peg$FAILED,
        peg$c42 = "Control",
        peg$c43 = { type: "literal", value: "Control", description: "\"Control\"" },
        peg$c44 = function(ex) {return ('(?:\c' + ex + ')')},
        peg$c45 = "Code",
        peg$c46 = { type: "literal", value: "Code", description: "\"Code\"" },
        peg$c47 = function(ex) {return ('(?:' + ex + ')')},
        peg$c48 = "Begins With",
        peg$c49 = { type: "literal", value: "Begins With", description: "\"Begins With\"" },
        peg$c50 = function(ex) {return ('(?:^' + ex + ')')},
        peg$c51 = "Ends With",
        peg$c52 = { type: "literal", value: "Ends With", description: "\"Ends With\"" },
        peg$c53 = function(ex) {return ('(?:' + ex + '$)')},
        peg$c54 = "Zero Or More",
        peg$c55 = { type: "literal", value: "Zero Or More", description: "\"Zero Or More\"" },
        peg$c56 = function(ex) {return ('(?:' + ex + ')*')},
        peg$c57 = "Zero Or One",
        peg$c58 = { type: "literal", value: "Zero Or One", description: "\"Zero Or One\"" },
        peg$c59 = function(ex) {return ('(?:' + ex + '?)')},
        peg$c60 = "One Or More",
        peg$c61 = { type: "literal", value: "One Or More", description: "\"One Or More\"" },
        peg$c62 = function(ex) {return ('(?:' + ex + ')+')},
        peg$c63 = "Any Of",
        peg$c64 = { type: "literal", value: "Any Of", description: "\"Any Of\"" },
        peg$c65 = function(ex) {return ('[(?:' + ex + ')]')},
        peg$c66 = "None Of",
        peg$c67 = { type: "literal", value: "None Of", description: "\"None Of\"" },
        peg$c68 = function(ex) {return ('[^(?:' + ex + ')]')},
        peg$c69 = "Match",
        peg$c70 = { type: "literal", value: "Match", description: "\"Match\"" },
        peg$c71 = function(st) {return (st)},
        peg$c72 = "Or",
        peg$c73 = { type: "literal", value: "Or", description: "\"Or\"" },
        peg$c74 = function(ex1, ex2) {return ('(?:' + ex1 + '|' + ex2 + ')')},
        peg$c75 = "Followed By",
        peg$c76 = { type: "literal", value: "Followed By", description: "\"Followed By\"" },
        peg$c77 = function(ex1, ex2) {return ('(?:' + ex1 + '(?=' + ex2 + '))')},
        peg$c78 = "Not Followed By",
        peg$c79 = { type: "literal", value: "Not Followed By", description: "\"Not Followed By\"" },
        peg$c80 = function(ex1, ex2) {return ('(?:' + ex1 + '(?!' + ex2 + '))')},
        peg$c81 = "To",
        peg$c82 = { type: "literal", value: "To", description: "\"To\"" },
        peg$c83 = function(ex1, ex2) {return (ex1 + '-' +ex2)},
        peg$c84 = "Times",
        peg$c85 = { type: "literal", value: "Times", description: "\"Times\"" },
        peg$c86 = function(in1, ex) {return ('(?:' + ex + '{' +  in1 +'})')},
        peg$c87 = "At Least",
        peg$c88 = { type: "literal", value: "At Least", description: "\"At Least\"" },
        peg$c89 = function(in1, ex) {return ('(?:' + ex + '{' +  in1 +',})')},
        peg$c90 = function(in1, in2, ex) {return ('(?:' + ex + '{' +  in1 +',' + in2 + '})')},
        peg$c91 = function(op, ex) {return pushResult (op) + ex},
        peg$c92 = function(op) {pushResult(op); var r = stack.reverse().join(''); stack = []; return r},
        peg$c93 = function(uop, ex) {variables[uop] = ex},
        peg$c94 = function(uop, ex) {if (variables[uop]) {return pushResult(variables[uop]) + expr2}},
        peg$c95 = function(op, ex) {return (op + ex);},
        peg$c96 = function(op) {return (op)},
        peg$c97 = function(op) {return op},
        peg$c98 = function(uop) {return variables[uop] },
        peg$c99 = function(uop, ex) {return (variables[uop] + ex) },
        peg$c100 = "(",
        peg$c101 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c102 = ")",
        peg$c103 = { type: "literal", value: ")", description: "\")\"" },
        peg$c104 = ",",
        peg$c105 = { type: "literal", value: ",", description: "\",\"" },
        peg$c106 = ";",
        peg$c107 = { type: "literal", value: ";", description: "\";\"" },
        peg$c108 = "=",
        peg$c109 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c110 = /^[a-z]/,
        peg$c111 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c112 = function(name) {return name.join("")},
        peg$c113 = { type: "other", description: "integer" },
        peg$c114 = /^[0-9]/,
        peg$c115 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c116 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c117 = { type: "other", description: "string" },
        peg$c118 = function(chars) { return chars.join("").replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"); },
        peg$c119 = { type: "other", description: "whitespace" },
        peg$c120 = /^[ \t\n\r]/,
        peg$c121 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c122 = "\"",
        peg$c123 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c124 = "\\",
        peg$c125 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c126 = "/",
        peg$c127 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c128 = "b",
        peg$c129 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c130 = function() { return "\b"; },
        peg$c131 = "f",
        peg$c132 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c133 = function() { return "\f"; },
        peg$c134 = "n",
        peg$c135 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c136 = function() { return "\n"; },
        peg$c137 = "r",
        peg$c138 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c139 = function() { return "\r"; },
        peg$c140 = "t",
        peg$c141 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c142 = function() { return "\t"; },
        peg$c143 = "u",
        peg$c144 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c145 = function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
                },
        peg$c146 = function(sequence) { return sequence; },
        peg$c147 = "'",
        peg$c148 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c149 = /^[ -!#-[\]-\u10FFFF]/,
        peg$c150 = { type: "class", value: "[ -!#-[\\]-\\u10FFFF]", description: "[ -!#-[\\]-\\u10FFFF]" },
        peg$c151 = /^[0-9a-f]/i,
        peg$c152 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseexpr();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseexpr();
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c1();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoperator() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c4();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c5) {
          s1 = peg$c5;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c7();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c11) {
              s1 = peg$c11;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c13();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c14) {
                s1 = peg$c14;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c16();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9) === peg$c17) {
                  s1 = peg$c17;
                  peg$currPos += 9;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c19();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c20) {
                    s1 = peg$c20;
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c22();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c23) {
                      s1 = peg$c23;
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c24); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c25();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 8) === peg$c26) {
                        s1 = peg$c26;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c27); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c28();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 12) === peg$c29) {
                          s1 = peg$c29;
                          peg$currPos += 12;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c30); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c31();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 9) === peg$c32) {
                            s1 = peg$c32;
                            peg$currPos += 9;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c33); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c34();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 9) === peg$c35) {
                              s1 = peg$c35;
                              peg$currPos += 9;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c36); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c37();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c38) {
                                s1 = peg$c38;
                                peg$currPos += 4;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c40();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 7) === peg$c42) {
                                  s1 = peg$c42;
                                  peg$currPos += 7;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                }
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parselparen();
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexpr2();
                                    if (s3 !== peg$FAILED) {
                                      s4 = peg$parserparen();
                                      if (s4 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c44(s3);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c41;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c41;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c41;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c41;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 4) === peg$c45) {
                                    s1 = peg$c45;
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parselparen();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseexpr2();
                                      if (s3 !== peg$FAILED) {
                                        s4 = peg$parserparen();
                                        if (s4 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c47(s3);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c41;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c41;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c41;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c41;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 11) === peg$c48) {
                                      s1 = peg$c48;
                                      peg$currPos += 11;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c49); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parselparen();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseexpr2();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parserparen();
                                          if (s4 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c50(s3);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c41;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c41;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c41;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c41;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 9) === peg$c51) {
                                        s1 = peg$c51;
                                        peg$currPos += 9;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parselparen();
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseexpr2();
                                          if (s3 !== peg$FAILED) {
                                            s4 = peg$parserparen();
                                            if (s4 !== peg$FAILED) {
                                              peg$reportedPos = s0;
                                              s1 = peg$c53(s3);
                                              s0 = s1;
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c41;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c41;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c41;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c41;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 12) === peg$c54) {
                                          s1 = peg$c54;
                                          peg$currPos += 12;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parselparen();
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseexpr2();
                                            if (s3 !== peg$FAILED) {
                                              s4 = peg$parserparen();
                                              if (s4 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c56(s3);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c41;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c41;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c41;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c41;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 11) === peg$c57) {
                                            s1 = peg$c57;
                                            peg$currPos += 11;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parselparen();
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseexpr2();
                                              if (s3 !== peg$FAILED) {
                                                s4 = peg$parserparen();
                                                if (s4 !== peg$FAILED) {
                                                  peg$reportedPos = s0;
                                                  s1 = peg$c59(s3);
                                                  s0 = s1;
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c41;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c41;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c41;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c41;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 11) === peg$c60) {
                                              s1 = peg$c60;
                                              peg$currPos += 11;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parselparen();
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseexpr2();
                                                if (s3 !== peg$FAILED) {
                                                  s4 = peg$parserparen();
                                                  if (s4 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c62(s3);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c41;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c41;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c41;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c41;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 6) === peg$c63) {
                                                s1 = peg$c63;
                                                peg$currPos += 6;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parselparen();
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseexpr2();
                                                  if (s3 !== peg$FAILED) {
                                                    s4 = peg$parserparen();
                                                    if (s4 !== peg$FAILED) {
                                                      peg$reportedPos = s0;
                                                      s1 = peg$c65(s3);
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c41;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c41;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c41;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c41;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 7) === peg$c66) {
                                                  s1 = peg$c66;
                                                  peg$currPos += 7;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parselparen();
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseexpr2();
                                                    if (s3 !== peg$FAILED) {
                                                      s4 = peg$parserparen();
                                                      if (s4 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c68(s3);
                                                        s0 = s1;
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c41;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c41;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c41;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c41;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.substr(peg$currPos, 9) === peg$c51) {
                                                    s1 = peg$c51;
                                                    peg$currPos += 9;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parselparen();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parseexpr2();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parserparen();
                                                        if (s4 !== peg$FAILED) {
                                                          peg$reportedPos = s0;
                                                          s1 = peg$c53(s3);
                                                          s0 = s1;
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c41;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c41;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c41;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c41;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 5) === peg$c69) {
                                                      s1 = peg$c69;
                                                      peg$currPos += 5;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parselparen();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parseexpr2();
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parserparen();
                                                          if (s4 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c47(s3);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c41;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c41;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c41;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c41;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parsews();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parsestring();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsews();
                                                          if (s3 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c71(s2);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c41;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c41;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c41;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parselparen();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parseexpr2();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parsews();
                                                            if (s3 !== peg$FAILED) {
                                                              s4 = peg$parserparen();
                                                              if (s4 !== peg$FAILED) {
                                                                s5 = peg$parsews();
                                                                if (s5 !== peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 2) === peg$c72) {
                                                                    s6 = peg$c72;
                                                                    peg$currPos += 2;
                                                                  } else {
                                                                    s6 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                                                  }
                                                                  if (s6 !== peg$FAILED) {
                                                                    s7 = peg$parselparen();
                                                                    if (s7 !== peg$FAILED) {
                                                                      s8 = peg$parseexpr2();
                                                                      if (s8 !== peg$FAILED) {
                                                                        s9 = peg$parserparen();
                                                                        if (s9 !== peg$FAILED) {
                                                                          peg$reportedPos = s0;
                                                                          s1 = peg$c74(s2, s8);
                                                                          s0 = s1;
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c41;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c41;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c41;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c41;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c41;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parselparen();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parseexpr2();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parsews();
                                                              if (s3 !== peg$FAILED) {
                                                                s4 = peg$parserparen();
                                                                if (s4 !== peg$FAILED) {
                                                                  s5 = peg$parsews();
                                                                  if (s5 !== peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 11) === peg$c75) {
                                                                      s6 = peg$c75;
                                                                      peg$currPos += 11;
                                                                    } else {
                                                                      s6 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c76); }
                                                                    }
                                                                    if (s6 !== peg$FAILED) {
                                                                      s7 = peg$parselparen();
                                                                      if (s7 !== peg$FAILED) {
                                                                        s8 = peg$parseexpr2();
                                                                        if (s8 !== peg$FAILED) {
                                                                          s9 = peg$parserparen();
                                                                          if (s9 !== peg$FAILED) {
                                                                            peg$reportedPos = s0;
                                                                            s1 = peg$c77(s2, s8);
                                                                            s0 = s1;
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c41;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c41;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c41;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c41;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parselparen();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parseexpr2();
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parsews();
                                                                if (s3 !== peg$FAILED) {
                                                                  s4 = peg$parserparen();
                                                                  if (s4 !== peg$FAILED) {
                                                                    s5 = peg$parsews();
                                                                    if (s5 !== peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 15) === peg$c78) {
                                                                        s6 = peg$c78;
                                                                        peg$currPos += 15;
                                                                      } else {
                                                                        s6 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                                      }
                                                                      if (s6 !== peg$FAILED) {
                                                                        s7 = peg$parselparen();
                                                                        if (s7 !== peg$FAILED) {
                                                                          s8 = peg$parseexpr2();
                                                                          if (s8 !== peg$FAILED) {
                                                                            s9 = peg$parserparen();
                                                                            if (s9 !== peg$FAILED) {
                                                                              peg$reportedPos = s0;
                                                                              s1 = peg$c80(s2, s8);
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c41;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c41;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c41;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c41;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parselparen();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parseexpr2();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parsews();
                                                                  if (s3 !== peg$FAILED) {
                                                                    s4 = peg$parserparen();
                                                                    if (s4 !== peg$FAILED) {
                                                                      s5 = peg$parsews();
                                                                      if (s5 !== peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c81) {
                                                                          s6 = peg$c81;
                                                                          peg$currPos += 2;
                                                                        } else {
                                                                          s6 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                                        }
                                                                        if (s6 !== peg$FAILED) {
                                                                          s7 = peg$parselparen();
                                                                          if (s7 !== peg$FAILED) {
                                                                            s8 = peg$parseexpr2();
                                                                            if (s8 !== peg$FAILED) {
                                                                              s9 = peg$parserparen();
                                                                              if (s9 !== peg$FAILED) {
                                                                                peg$reportedPos = s0;
                                                                                s1 = peg$c83(s2, s8);
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c41;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c41;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c41;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c41;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                s1 = peg$parselparen();
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = peg$parseinteger();
                                                                  if (s2 !== peg$FAILED) {
                                                                    s3 = peg$parserparen();
                                                                    if (s3 !== peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 5) === peg$c84) {
                                                                        s4 = peg$c84;
                                                                        peg$currPos += 5;
                                                                      } else {
                                                                        s4 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                                      }
                                                                      if (s4 !== peg$FAILED) {
                                                                        s5 = peg$parselparen();
                                                                        if (s5 !== peg$FAILED) {
                                                                          s6 = peg$parseexpr2();
                                                                          if (s6 !== peg$FAILED) {
                                                                            s7 = peg$parserparen();
                                                                            if (s7 !== peg$FAILED) {
                                                                              peg$reportedPos = s0;
                                                                              s1 = peg$c86(s2, s6);
                                                                              s0 = s1;
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c41;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c41;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  if (input.substr(peg$currPos, 8) === peg$c87) {
                                                                    s1 = peg$c87;
                                                                    peg$currPos += 8;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                                                  }
                                                                  if (s1 !== peg$FAILED) {
                                                                    s2 = peg$parselparen();
                                                                    if (s2 !== peg$FAILED) {
                                                                      s3 = peg$parseinteger();
                                                                      if (s3 !== peg$FAILED) {
                                                                        s4 = peg$parserparen();
                                                                        if (s4 !== peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 5) === peg$c84) {
                                                                            s5 = peg$c84;
                                                                            peg$currPos += 5;
                                                                          } else {
                                                                            s5 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                                          }
                                                                          if (s5 !== peg$FAILED) {
                                                                            s6 = peg$parselparen();
                                                                            if (s6 !== peg$FAILED) {
                                                                              s7 = peg$parseexpr2();
                                                                              if (s7 !== peg$FAILED) {
                                                                                s8 = peg$parserparen();
                                                                                if (s8 !== peg$FAILED) {
                                                                                  peg$reportedPos = s0;
                                                                                  s1 = peg$c89(s3, s7);
                                                                                  s0 = s1;
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c41;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c41;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c41;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c41;
                                                                  }
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    s1 = peg$parselparen();
                                                                    if (s1 !== peg$FAILED) {
                                                                      s2 = peg$parseinteger();
                                                                      if (s2 !== peg$FAILED) {
                                                                        s3 = peg$parserparen();
                                                                        if (s3 !== peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 2) === peg$c81) {
                                                                            s4 = peg$c81;
                                                                            peg$currPos += 2;
                                                                          } else {
                                                                            s4 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                                          }
                                                                          if (s4 !== peg$FAILED) {
                                                                            s5 = peg$parselparen();
                                                                            if (s5 !== peg$FAILED) {
                                                                              s6 = peg$parseinteger();
                                                                              if (s6 !== peg$FAILED) {
                                                                                s7 = peg$parserparen();
                                                                                if (s7 !== peg$FAILED) {
                                                                                  if (input.substr(peg$currPos, 5) === peg$c84) {
                                                                                    s8 = peg$c84;
                                                                                    peg$currPos += 5;
                                                                                  } else {
                                                                                    s8 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                                                  }
                                                                                  if (s8 !== peg$FAILED) {
                                                                                    s9 = peg$parselparen();
                                                                                    if (s9 !== peg$FAILED) {
                                                                                      s10 = peg$parseexpr2();
                                                                                      if (s10 !== peg$FAILED) {
                                                                                        s11 = peg$parserparen();
                                                                                        if (s11 !== peg$FAILED) {
                                                                                          peg$reportedPos = s0;
                                                                                          s1 = peg$c90(s2, s6, s10);
                                                                                          s0 = s1;
                                                                                        } else {
                                                                                          peg$currPos = s0;
                                                                                          s0 = peg$c41;
                                                                                        }
                                                                                      } else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$c41;
                                                                                      }
                                                                                    } else {
                                                                                      peg$currPos = s0;
                                                                                      s0 = peg$c41;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$c41;
                                                                                  }
                                                                                } else {
                                                                                  peg$currPos = s0;
                                                                                  s0 = peg$c41;
                                                                                }
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c41;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c41;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c41;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c41;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c41;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c41;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c91(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoperator();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseterminator();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c92(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseuseroperator();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseequals();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseexpr2();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c93(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c41;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c41;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseuseroperator();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsecomma();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseexpr2();
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c94(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c41;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c41;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c41;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexpr2() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoperator();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecomma();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpr2();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c95(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseoperator();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseterminator();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c96(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseoperator();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c97(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c41;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseuseroperator();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseterminator();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c98(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c41;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c41;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseuseroperator();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsecomma();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseexpr2();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c99(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c41;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c41;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c41;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselparen() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c100;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }

      return s0;
    }

    function peg$parserparen() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c102;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }

      return s0;
    }

    function peg$parsecomma() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c104;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }

      return s0;
    }

    function peg$parseterminator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c106;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }

      return s0;
    }

    function peg$parseequals() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c108;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }

      return s0;
    }

    function peg$parseuseroperator() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c110.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c110.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c112(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c114.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c114.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c115); }
          }
        }
      } else {
        s1 = peg$c41;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c116(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsedouble_quote();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsechar();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedouble_quote();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c41;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (peg$c120.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c120.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c119); }
      }

      return s0;
    }

    function peg$parsechar() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$parseunescaped();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseescape();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c122;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c123); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c124;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c125); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s2 = peg$c126;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 98) {
                  s3 = peg$c128;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c129); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c130();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 102) {
                    s3 = peg$c131;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c133();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 110) {
                      s3 = peg$c134;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c135); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s2;
                      s3 = peg$c136();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 114) {
                        s3 = peg$c137;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c138); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c139();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 116) {
                          s3 = peg$c140;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c141); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$reportedPos = s2;
                          s3 = peg$c142();
                        }
                        s2 = s3;
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          if (input.charCodeAt(peg$currPos) === 117) {
                            s3 = peg$c143;
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c144); }
                          }
                          if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            s6 = peg$parseHEXDIG();
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parseHEXDIG();
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseHEXDIG();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseHEXDIG();
                                  if (s9 !== peg$FAILED) {
                                    s6 = [s6, s7, s8, s9];
                                    s5 = s6;
                                  } else {
                                    peg$currPos = s5;
                                    s5 = peg$c41;
                                  }
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$c41;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$c41;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$c41;
                            }
                            if (s5 !== peg$FAILED) {
                              s5 = input.substring(s4, peg$currPos);
                            }
                            s4 = s5;
                            if (s4 !== peg$FAILED) {
                              peg$reportedPos = s2;
                              s3 = peg$c145(s4);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$c41;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c41;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c146(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c41;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c41;
        }
      }

      return s0;
    }

    function peg$parseescape() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 92) {
        s0 = peg$c124;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }

      return s0;
    }

    function peg$parsedouble_quote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c122;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      return s0;
    }

    function peg$parsesingle_quote() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c147;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parseunescaped() {
      var s0;

      if (peg$c149.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c114.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c151.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }

      return s0;
    }


      var stack = [];
      var variables = {};
      function pushResult (result) {
        stack.push(result);
        return result;
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
